//CODE FOR TRANSMITTER FOLLOWED BY RECEIVER AND TEST BENCHES


module uart_tx (
    input wire clk,
    input wire reset,
    input wire tx_start,
    input wire [7:0] tx_data,
    output reg tx,
    output reg tx_busy
);

    parameter CLK_FREQ = 50000000; // 50 MHz
    parameter BAUD_RATE = 9600;
    parameter CLK_PER_BIT = CLK_FREQ / BAUD_RATE;

    reg [3:0] bit_index;
    reg [15:0] clk_count;
    reg [9:0] tx_shift_reg;

    typedef enum reg [1:0] {
        IDLE = 2'b00,
        START = 2'b01,
        DATA = 2'b10,
        STOP = 2'b11
    } state_t;

    state_t current_state, next_state;

    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= IDLE;
            clk_count <= 0;
            bit_index <= 0;
            tx_busy <= 0;
            tx <= 1;
        end else begin
            current_state <= next_state;

            if (clk_count < CLK_PER_BIT - 1)
                clk_count <= clk_count + 1;
            else begin
                clk_count <= 0;

                case (current_state)
                    START: begin
                        tx <= 0;
                    end
                    DATA: begin
                        tx <= tx_shift_reg[bit_index];
                        bit_index <= bit_index + 1;
                    end
                    STOP: begin
                        tx <= 1;
                    end
                endcase
            end
        end
    end

    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            tx_shift_reg <= 0;
        end else if (tx_start) begin
            tx_shift_reg <= {1'b1, tx_data, 1'b0}; // Start bit, data, stop bit
        end
    end

    always_comb begin
        next_state = current_state;
        case (current_state)
            IDLE: begin
                tx_busy = 0;
                if (tx_start) begin
                    next_state = START;
                    tx_busy = 1;
                end
            end
            START: begin
                if (clk_count == CLK_PER_BIT - 1)
                    next_state = DATA;
            end
            DATA: begin
                if (clk_count == CLK_PER_BIT - 1 && bit_index == 8)
                    next_state = STOP;
            end
            STOP: begin
                if (clk_count == CLK_PER_BIT - 1)
                    next_state = IDLE;
            end
        endcase
    end

endmodule


module uart_rx (
    input wire clk,
    input wire reset,
    input wire rx,
    output reg [7:0] rx_data,
    output reg rx_done
);

    parameter CLK_FREQ = 50000000; // 50 MHz
    parameter BAUD_RATE = 9600;
    parameter CLK_PER_BIT = CLK_FREQ / BAUD_RATE;

    reg [15:0] clk_count;
    reg [3:0] bit_index;
    reg [9:0] rx_shift_reg;

    typedef enum reg [1:0] {
        IDLE = 2'b00,
        START = 2'b01,
        DATA = 2'b10,
        STOP = 2'b11
    } state_t;

    state_t current_state, next_state;

    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= IDLE;
            clk_count <= 0;
            bit_index <= 0;
            rx_done <= 0;
        end else begin
            current_state <= next_state;

            if (clk_count < CLK_PER_BIT - 1)
                clk_count <= clk_count + 1;
            else begin
                clk_count <= 0;

                case (current_state)
                    START: begin
                        if (clk_count == CLK_PER_BIT / 2)
                            next_state = DATA;
                    end
                    DATA: begin
                        if (clk_count == CLK_PER_BIT - 1) begin
                            rx_shift_reg[bit_index] <= rx;
                            bit_index <= bit_index + 1;
                            if (bit_index == 8)
                                next_state = STOP;
                        end
                    end
                    STOP: begin
                        if (clk_count == CLK_PER_BIT - 1) begin
                            rx_done <= 1;
                            rx_data <= rx_shift_reg[8:1];
                            next_state = IDLE;
                        end
                    end
                endcase
            end
        end
    end

    always_comb begin
        next_state = current_state;
        case (current_state)
            IDLE: begin
                rx_done = 0;
                if (!rx) begin
                    next_state = START;
                    clk_count = 0;
                end
            end
            START: begin
                if (clk_count == CLK_PER_BIT / 2)
                    next_state = DATA;
            end
            DATA: begin
                if (clk_count == CLK_PER_BIT - 1 && bit_index == 8)
                    next_state = STOP;
            end
            STOP: begin
                if (clk_count == CLK_PER_BIT - 1)
                    next_state = IDLE;
            end
        endcase
    end

endmodule



module tb_uart;

    reg clk;
    reg reset;
    reg tx_start;
    reg [7:0] tx_data;
    wire tx;
    wire tx_busy;
    reg rx;
    wire [7:0] rx_data;
    wire rx_done;

    // Instantiate UART Transmitter
    uart_tx uut_tx (
        .clk(clk),
        .reset(reset),
        .tx_start(tx_start),
        .tx_data(tx_data),
        .tx(tx),
        .tx_busy(tx_busy)
    );

    // Instantiate UART Receiver
    uart_rx uut_rx (
        .clk(clk),
        .reset(reset),
        .rx(tx), // Connect tx of transmitter to rx of receiver
        .rx_data(rx_data),
        .rx_done(rx_done)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #10 clk = ~clk; // 50 MHz clock
    end

    // Test sequence
    initial begin
        reset = 1;
        tx_start = 0;
        tx_data = 8'h55; // Example data to transmit

        #100;
        reset = 0;

        #100;
        tx_start = 1;
        #20;
        tx_start = 0;

        #1000; // Wait for transmission to complete

        $finish;
    end

    // Monitor signals
    initial begin
        $monitor("Time=%0t, reset=%b, tx_start=%b, tx_data=%h, tx=%b, tx_busy=%b, rx=%b, rx_data=%h, rx_done=%b",
                 $time, reset, tx_start, tx_data, tx, tx_busy, rx, rx_data, rx_done);
    end

endmodule
